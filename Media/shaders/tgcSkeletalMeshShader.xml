<tgcEffect>
    
    
<vs_vertexColor>
<![CDATA[
uniform mat4 uWorld;
uniform mat4 uView;
uniform mat4 uProjection;
uniform mat4 uWorldView;
uniform mat4 uWorldViewProjection;

attribute vec4 aPosition;
attribute vec4 aColor;

varying vec4 vNormal;
varying vec4 vColor;

void main() {
	gl_Position = uWorldViewProjection * aPosition;
	vColor = aColor;
}
]]>
</vs_vertexColor>
	    

<vs_diffuseMap>
<![CDATA[
uniform mat4 uWorld;
uniform mat4 uView;
uniform mat4 uProjection;
uniform mat4 uWorldView;
uniform mat4 uWorldViewProjection;

attribute vec4 aPosition;
attribute vec4 aColor;
attribute vec2 aTexcoord;

varying vec2 vTexcoord;
varying vec4 vColor;

void main() {
	gl_Position = uWorldViewProjection * aPosition;
	vTexcoord = aTexcoord;
}
]]>
</vs_diffuseMap>





<ps_vertexColor>
<![CDATA[
precision mediump float;

varying vec4 vColor;

void main() {
	gl_FragColor = vColor;
}
]]>
</ps_vertexColor>

<ps_diffuseMap>
<![CDATA[
precision mediump float;

varying vec2 vTexcoord;
varying vec4 vColor;

uniform sampler2D uDiffuseMap;

void main() {
	
	//Obtener color de Texel
	vec4 color = texture2D(uDiffuseMap, vTexcoord);
	
	//Alpha-Test
	if(color.a < 0.1) {
		discard;
	}
	
	//Color final
	gl_FragColor = color;
}
]]>
</ps_diffuseMap>






<techniques>
    <VertexColorTechnique vertexShader="vs_vertexColor" fragmentShader="ps_vertexColor"/>
	<DiffuseMapTechnique vertexShader="vs_diffuseMap" fragmentShader="ps_diffuseMap"/>
</techniques>


</tgcEffect>